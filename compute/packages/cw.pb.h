// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cw.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cw_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cw_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cw_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cw_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cw_2eproto;
namespace CDP {
class Disk;
class DiskDefaultTypeInternal;
extern DiskDefaultTypeInternal _Disk_default_instance_;
class Packing;
class PackingDefaultTypeInternal;
extern PackingDefaultTypeInternal _Packing_default_instance_;
}  // namespace CDP
PROTOBUF_NAMESPACE_OPEN
template<> ::CDP::Disk* Arena::CreateMaybeMessage<::CDP::Disk>(Arena*);
template<> ::CDP::Packing* Arena::CreateMaybeMessage<::CDP::Packing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CDP {

// ===================================================================

class Disk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDP.Disk) */ {
 public:
  inline Disk() : Disk(nullptr) {};
  virtual ~Disk();

  Disk(const Disk& from);
  Disk(Disk&& from) noexcept
    : Disk() {
    *this = ::std::move(from);
  }

  inline Disk& operator=(const Disk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Disk& operator=(Disk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Disk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Disk* internal_default_instance() {
    return reinterpret_cast<const Disk*>(
               &_Disk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Disk& a, Disk& b) {
    a.Swap(&b);
  }
  inline void Swap(Disk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Disk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Disk* New() const final {
    return CreateMaybeMessage<Disk>(nullptr);
  }

  Disk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Disk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Disk& from);
  void MergeFrom(const Disk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Disk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDP.Disk";
  }
  protected:
  explicit Disk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cw_2eproto);
    return ::descriptor_table_cw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kRadiusFieldNumber = 3,
    kSizeTypeFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double radius = 3;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // int32 size_type = 4;
  void clear_size_type();
  ::PROTOBUF_NAMESPACE_ID::int32 size_type() const;
  void set_size_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size_type() const;
  void _internal_set_size_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDP.Disk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cw_2eproto;
};
// -------------------------------------------------------------------

class Packing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDP.Packing) */ {
 public:
  inline Packing() : Packing(nullptr) {};
  virtual ~Packing();

  Packing(const Packing& from);
  Packing(Packing&& from) noexcept
    : Packing() {
    *this = ::std::move(from);
  }

  inline Packing& operator=(const Packing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packing& operator=(Packing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packing* internal_default_instance() {
    return reinterpret_cast<const Packing*>(
               &_Packing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Packing& a, Packing& b) {
    a.Swap(&b);
  }
  inline void Swap(Packing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packing* New() const final {
    return CreateMaybeMessage<Packing>(nullptr);
  }

  Packing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packing& from);
  void MergeFrom(const Packing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDP.Packing";
  }
  protected:
  explicit Packing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cw_2eproto);
    return ::descriptor_table_cw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisksFieldNumber = 2,
    kDimensionsFieldNumber = 1,
  };
  // repeated .CDP.Disk disks = 2;
  int disks_size() const;
  private:
  int _internal_disks_size() const;
  public:
  void clear_disks();
  ::CDP::Disk* mutable_disks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::Disk >*
      mutable_disks();
  private:
  const ::CDP::Disk& _internal_disks(int index) const;
  ::CDP::Disk* _internal_add_disks();
  public:
  const ::CDP::Disk& disks(int index) const;
  ::CDP::Disk* add_disks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::Disk >&
      disks() const;

  // int32 dimensions = 1;
  void clear_dimensions();
  ::PROTOBUF_NAMESPACE_ID::int32 dimensions() const;
  void set_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dimensions() const;
  void _internal_set_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDP.Packing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::Disk > disks_;
  ::PROTOBUF_NAMESPACE_ID::int32 dimensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cw_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Disk

// double x = 1;
inline void Disk::clear_x() {
  x_ = 0;
}
inline double Disk::_internal_x() const {
  return x_;
}
inline double Disk::x() const {
  // @@protoc_insertion_point(field_get:CDP.Disk.x)
  return _internal_x();
}
inline void Disk::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Disk::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CDP.Disk.x)
}

// double y = 2;
inline void Disk::clear_y() {
  y_ = 0;
}
inline double Disk::_internal_y() const {
  return y_;
}
inline double Disk::y() const {
  // @@protoc_insertion_point(field_get:CDP.Disk.y)
  return _internal_y();
}
inline void Disk::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Disk::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CDP.Disk.y)
}

// double radius = 3;
inline void Disk::clear_radius() {
  radius_ = 0;
}
inline double Disk::_internal_radius() const {
  return radius_;
}
inline double Disk::radius() const {
  // @@protoc_insertion_point(field_get:CDP.Disk.radius)
  return _internal_radius();
}
inline void Disk::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void Disk::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:CDP.Disk.radius)
}

// int32 size_type = 4;
inline void Disk::clear_size_type() {
  size_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Disk::_internal_size_type() const {
  return size_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Disk::size_type() const {
  // @@protoc_insertion_point(field_get:CDP.Disk.size_type)
  return _internal_size_type();
}
inline void Disk::_internal_set_size_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_type_ = value;
}
inline void Disk::set_size_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size_type(value);
  // @@protoc_insertion_point(field_set:CDP.Disk.size_type)
}

// -------------------------------------------------------------------

// Packing

// int32 dimensions = 1;
inline void Packing::clear_dimensions() {
  dimensions_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packing::_internal_dimensions() const {
  return dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packing::dimensions() const {
  // @@protoc_insertion_point(field_get:CDP.Packing.dimensions)
  return _internal_dimensions();
}
inline void Packing::_internal_set_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dimensions_ = value;
}
inline void Packing::set_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dimensions(value);
  // @@protoc_insertion_point(field_set:CDP.Packing.dimensions)
}

// repeated .CDP.Disk disks = 2;
inline int Packing::_internal_disks_size() const {
  return disks_.size();
}
inline int Packing::disks_size() const {
  return _internal_disks_size();
}
inline void Packing::clear_disks() {
  disks_.Clear();
}
inline ::CDP::Disk* Packing::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:CDP.Packing.disks)
  return disks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::Disk >*
Packing::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:CDP.Packing.disks)
  return &disks_;
}
inline const ::CDP::Disk& Packing::_internal_disks(int index) const {
  return disks_.Get(index);
}
inline const ::CDP::Disk& Packing::disks(int index) const {
  // @@protoc_insertion_point(field_get:CDP.Packing.disks)
  return _internal_disks(index);
}
inline ::CDP::Disk* Packing::_internal_add_disks() {
  return disks_.Add();
}
inline ::CDP::Disk* Packing::add_disks() {
  // @@protoc_insertion_point(field_add:CDP.Packing.disks)
  return _internal_add_disks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::Disk >&
Packing::disks() const {
  // @@protoc_insertion_point(field_list:CDP.Packing.disks)
  return disks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CDP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cw_2eproto