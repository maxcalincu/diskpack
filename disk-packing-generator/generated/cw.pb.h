// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/cw.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fcw_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fcw_2eproto

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fcw_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fcw_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fcw_2eproto;
namespace CDP {
class ProtoDisk;
class ProtoDiskDefaultTypeInternal;
extern ProtoDiskDefaultTypeInternal _ProtoDisk_default_instance_;
class ProtoPacking;
class ProtoPackingDefaultTypeInternal;
extern ProtoPackingDefaultTypeInternal _ProtoPacking_default_instance_;
}  // namespace CDP
PROTOBUF_NAMESPACE_OPEN
template<> ::CDP::ProtoDisk* Arena::CreateMaybeMessage<::CDP::ProtoDisk>(Arena*);
template<> ::CDP::ProtoPacking* Arena::CreateMaybeMessage<::CDP::ProtoPacking>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CDP {

// ===================================================================

class ProtoDisk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDP.ProtoDisk) */ {
 public:
  inline ProtoDisk() : ProtoDisk(nullptr) {};
  virtual ~ProtoDisk();

  ProtoDisk(const ProtoDisk& from);
  ProtoDisk(ProtoDisk&& from) noexcept
    : ProtoDisk() {
    *this = ::std::move(from);
  }

  inline ProtoDisk& operator=(const ProtoDisk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoDisk& operator=(ProtoDisk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoDisk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoDisk* internal_default_instance() {
    return reinterpret_cast<const ProtoDisk*>(
               &_ProtoDisk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoDisk& a, ProtoDisk& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoDisk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoDisk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoDisk* New() const final {
    return CreateMaybeMessage<ProtoDisk>(nullptr);
  }

  ProtoDisk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoDisk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoDisk& from);
  void MergeFrom(const ProtoDisk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoDisk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDP.ProtoDisk";
  }
  protected:
  explicit ProtoDisk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fcw_2eproto);
    return ::descriptor_table_protos_2fcw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kRadiusFieldNumber = 3,
    kSizeTypeFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double radius = 3;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // int32 size_type = 4;
  void clear_size_type();
  ::PROTOBUF_NAMESPACE_ID::int32 size_type() const;
  void set_size_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size_type() const;
  void _internal_set_size_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDP.ProtoDisk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fcw_2eproto;
};
// -------------------------------------------------------------------

class ProtoPacking PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDP.ProtoPacking) */ {
 public:
  inline ProtoPacking() : ProtoPacking(nullptr) {};
  virtual ~ProtoPacking();

  ProtoPacking(const ProtoPacking& from);
  ProtoPacking(ProtoPacking&& from) noexcept
    : ProtoPacking() {
    *this = ::std::move(from);
  }

  inline ProtoPacking& operator=(const ProtoPacking& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoPacking& operator=(ProtoPacking&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoPacking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoPacking* internal_default_instance() {
    return reinterpret_cast<const ProtoPacking*>(
               &_ProtoPacking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoPacking& a, ProtoPacking& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoPacking* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoPacking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoPacking* New() const final {
    return CreateMaybeMessage<ProtoPacking>(nullptr);
  }

  ProtoPacking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoPacking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoPacking& from);
  void MergeFrom(const ProtoPacking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoPacking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDP.ProtoPacking";
  }
  protected:
  explicit ProtoPacking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fcw_2eproto);
    return ::descriptor_table_protos_2fcw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisksFieldNumber = 2,
    kDimensionsFieldNumber = 1,
  };
  // repeated .CDP.ProtoDisk disks = 2;
  int disks_size() const;
  private:
  int _internal_disks_size() const;
  public:
  void clear_disks();
  ::CDP::ProtoDisk* mutable_disks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::ProtoDisk >*
      mutable_disks();
  private:
  const ::CDP::ProtoDisk& _internal_disks(int index) const;
  ::CDP::ProtoDisk* _internal_add_disks();
  public:
  const ::CDP::ProtoDisk& disks(int index) const;
  ::CDP::ProtoDisk* add_disks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::ProtoDisk >&
      disks() const;

  // int32 dimensions = 1;
  void clear_dimensions();
  ::PROTOBUF_NAMESPACE_ID::int32 dimensions() const;
  void set_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dimensions() const;
  void _internal_set_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDP.ProtoPacking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::ProtoDisk > disks_;
  ::PROTOBUF_NAMESPACE_ID::int32 dimensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fcw_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoDisk

// double x = 1;
inline void ProtoDisk::clear_x() {
  x_ = 0;
}
inline double ProtoDisk::_internal_x() const {
  return x_;
}
inline double ProtoDisk::x() const {
  // @@protoc_insertion_point(field_get:CDP.ProtoDisk.x)
  return _internal_x();
}
inline void ProtoDisk::_internal_set_x(double value) {
  
  x_ = value;
}
inline void ProtoDisk::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CDP.ProtoDisk.x)
}

// double y = 2;
inline void ProtoDisk::clear_y() {
  y_ = 0;
}
inline double ProtoDisk::_internal_y() const {
  return y_;
}
inline double ProtoDisk::y() const {
  // @@protoc_insertion_point(field_get:CDP.ProtoDisk.y)
  return _internal_y();
}
inline void ProtoDisk::_internal_set_y(double value) {
  
  y_ = value;
}
inline void ProtoDisk::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CDP.ProtoDisk.y)
}

// double radius = 3;
inline void ProtoDisk::clear_radius() {
  radius_ = 0;
}
inline double ProtoDisk::_internal_radius() const {
  return radius_;
}
inline double ProtoDisk::radius() const {
  // @@protoc_insertion_point(field_get:CDP.ProtoDisk.radius)
  return _internal_radius();
}
inline void ProtoDisk::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void ProtoDisk::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:CDP.ProtoDisk.radius)
}

// int32 size_type = 4;
inline void ProtoDisk::clear_size_type() {
  size_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoDisk::_internal_size_type() const {
  return size_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoDisk::size_type() const {
  // @@protoc_insertion_point(field_get:CDP.ProtoDisk.size_type)
  return _internal_size_type();
}
inline void ProtoDisk::_internal_set_size_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_type_ = value;
}
inline void ProtoDisk::set_size_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size_type(value);
  // @@protoc_insertion_point(field_set:CDP.ProtoDisk.size_type)
}

// -------------------------------------------------------------------

// ProtoPacking

// int32 dimensions = 1;
inline void ProtoPacking::clear_dimensions() {
  dimensions_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoPacking::_internal_dimensions() const {
  return dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoPacking::dimensions() const {
  // @@protoc_insertion_point(field_get:CDP.ProtoPacking.dimensions)
  return _internal_dimensions();
}
inline void ProtoPacking::_internal_set_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dimensions_ = value;
}
inline void ProtoPacking::set_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dimensions(value);
  // @@protoc_insertion_point(field_set:CDP.ProtoPacking.dimensions)
}

// repeated .CDP.ProtoDisk disks = 2;
inline int ProtoPacking::_internal_disks_size() const {
  return disks_.size();
}
inline int ProtoPacking::disks_size() const {
  return _internal_disks_size();
}
inline void ProtoPacking::clear_disks() {
  disks_.Clear();
}
inline ::CDP::ProtoDisk* ProtoPacking::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:CDP.ProtoPacking.disks)
  return disks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::ProtoDisk >*
ProtoPacking::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:CDP.ProtoPacking.disks)
  return &disks_;
}
inline const ::CDP::ProtoDisk& ProtoPacking::_internal_disks(int index) const {
  return disks_.Get(index);
}
inline const ::CDP::ProtoDisk& ProtoPacking::disks(int index) const {
  // @@protoc_insertion_point(field_get:CDP.ProtoPacking.disks)
  return _internal_disks(index);
}
inline ::CDP::ProtoDisk* ProtoPacking::_internal_add_disks() {
  return disks_.Add();
}
inline ::CDP::ProtoDisk* ProtoPacking::add_disks() {
  // @@protoc_insertion_point(field_add:CDP.ProtoPacking.disks)
  return _internal_add_disks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDP::ProtoDisk >&
ProtoPacking::disks() const {
  // @@protoc_insertion_point(field_list:CDP.ProtoPacking.disks)
  return disks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CDP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fcw_2eproto
